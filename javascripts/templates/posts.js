var Handlebars = require('handlebars'); 
module.exports=
(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['1467727938000_testpost'] = template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<h1>Title</h1>\n\n<h2>BOOOM</h2>\n\n<h2>COOLIE</h2>\n\n<h2>more stuff</h2>";
},"useData":true});
templates['1467744678000_markdownExample'] = template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<p>CSS: style.css\nUse numbered headers: true\nHTML use syntax: true\nLaTeX use listings: true\nLaTeX CJK: false\nLaTeX preamble: preamble.tex</p>\n\n<h1>Maruku features</h1>\n\n<p>Maruku allows you to write in an easy-to-read-and-write syntax, like this:</p>\n\n<blockquote><p><a href=\"http://maruku.rubyforge.org/maruku.md\">This document in Markdown</a></p></blockquote>\n\n<p>Then it can be translated to HTML:</p>\n\n<blockquote><p><a href=\"http://maruku.rubyforge.org/maruku.html\">This document in HTML</a></p></blockquote>\n\n<p>or LaTeX, which is then converted to PDF:</p>\n\n<blockquote><p><a href=\"http://maruku.rubyforge.org/maruku.pdf\">This document in PDF</a></p></blockquote>\n\n<p>Maruku implements:</p>\n\n<ul><li><p>the original <a href=\"http://maruku.rubyforge.org/markdown_syntax.html\">Markdown syntax</a>\n(<a href=\"http://maruku.rubyforge.org/markdown_syntax.html\">HTML</a> or <a href=\"http://maruku.rubyforge.org/markdown_syntax.pdf\">PDF</a>), translated by Maruku).</p></li><li><p>all the improvements in <a href=\"http://www.michelf.com/projects/php-markdown/extra/\">PHP Markdown Extra</a>.</p></li><li><p>a new <a href=\"http://maruku.rubyforge.org/proposal.html\">meta-data syntax</a></p></li></ul>\n\n<hr/>\n\n<p>Table of contents: (<strong>auto-generated by Maruku!</strong>)</p>\n\n<ul><li>This list will contain the toc (it doesn&#39;t matter what you write here)\n{:toc}</li></ul>\n\n<hr/>\n\n<p>{:ruby:     lang=ruby code<em>background</em>color=&#39;#efffef&#39;}\n{:shell:    lang=sh code<em>background</em>color=&#39;#efefff&#39;}\n{:markdown: code<em>background</em>color=&#39;#ffefef&#39;}\n{:html:     lang=xml}</p>\n\n<h2>Maruku summary of features                {#features}</h2>\n\n<ul><li><p>Supported syntax</p><ul><li>[Basic Markdown][markdown_syntax]</li><li><a href=\"#extra\">Markdown Extra</a></li><li><a href=\"#meta\">Meta-data syntax</a></li></ul></li><li><p>Output</p><ul><li><p>XHTML</p><ul><li>Syntax highlighting via the <a href=\"http://syntax.rubyforge.org/\"><code>syntax</code></a> library.</li></ul></li><li><p>LaTeX</p><ul><li><a href=\"#entities\">Translation of HTML entities to LaTeX</a></li><li>Syntax highlighting via the <a href=\"http://www.ctan.org/tex-archive/macros/latex/contrib/listings/\"><code>listings</code></a> package.</li></ul></li></ul></li><li><p>Misc</p><ul><li><p><a href=\"exd.html\">Documentation for supported attributes</a></p></li><li><p><a href=\"#toc-generation\">Automatic generation of the TOC</a></p></li></ul></li></ul>\n\n<p><strong>Experimental features (not released yet)</strong></p>\n\n<ul><li>[LaTeX Math syntax][math_syntax] (not enabled by default)</li><li>An extension system for adding new syntax is available,\n	but the API is bound to change in the future,\n	so please don&#39;t use it.</li><li>LaTeX to MathML using either one of <a href=\"http://ritex.rubyforge.org\"><code>ritex</code></a>, <a href=\"http://golem.ph.utexas.edu/~distler/code/itexToMML/\"><code>itex2mml</code></a>,\n	<a href=\"http://www.blahtex.org\"><code>blahtex</code></a>.</li><li>LaTeX to PNG using <a href=\"http://www.blahtex.org\"><code>blahtex</code></a>.</li></ul>\n\n<h3>New meta-data syntax {#meta}</h3>\n\n<p>Maruku implements a syntax that allows to attach &quot;meta&quot; information\nto objects.</p>\n\n<p>See <a href=\"http://maruku.rubyforge.org/proposal.html\">this proposal</a> for how to attach\nmetadata to the elements.</p>\n\n<p>See the <a href=\"exd.html\">documentation for supported attributes</a>.</p>\n\n<p>Meta-data for the document itself is specified through the use\nof email headers:</p>\n\n<pre><code>Title: A simple document containing meta-headers\nCSS: style.css\n\nContent of the document</code></pre>\n\n<p>{:markdown}</p>\n\n<p>When creating the document through</p>\n\n<pre><code>Maruku.new(s).to_html_document</code></pre>\n\n<p>{:ruby}</p>\n\n<p>the title and stylesheet are added as expected.</p>\n\n<p>Meta-data keys are assumed to be case-insensitive.</p>\n\n<h3>Automatic generation of the table of contents ###    {#toc-generation}</h3>\n\n<p>If you create a list, and then set the <code>toc</code> attribute, when rendering\nMaruku will create an auto-generated table of contents.</p>\n\n<pre><code>* This will become a table of contents (this text will be scraped).\n{:toc}</code></pre>\n\n<p>You can see an example of this at the beginning of this document.</p>\n\n<h3>Use HTML entities ### {#entities}</h3>\n\n<p>If you want to use HTML entities, go on! We will take care\nof the translation to LaTeX:</p>\n\n<p>Entity      | Result\n------------|----------\n<code>&amp;copy;</code>    |  &amp;copy;\n<code>&amp;pound;</code>   |  &amp;pound;\n<code>&amp;lambda;</code>  |  &amp;lambda;\n<code>&amp;mdash;</code>   |  &amp;mdash;</p>\n\n<p>See the <a href=\"http://maruku.rubyforge.org/entity_test.html\">list of supported entities</a> (<a href=\"http://maruku.rubyforge.org/entity_test.pdf\">pdf</a>).</p>\n\n<h3>This header contains <em>emphasis</em> <strong>strong text</strong> and <code>code</code></h3>\n\n<p>Note that this header contains formatting and it still works, also in the table of contents.</p>\n\n<p>And <a href=\"#features\">This is a <em>link</em> with <strong>all</strong> <strong>*sort</strong>* of <code>weird stuff</code></a> in the text.</p>\n\n<h2>Examples of PHP Markdown Extra syntax {#extra}</h2>\n\n<ul><li><p>tables</p><pre><code>Col1 | Very very long head | Very very long head|\n-----|:-------------------:|-------------------:|\ncell | center-align        | right-align        |</code></pre><p>{:markdown}</p><p>Col1 | Very very long head | Very very long head|\n-----|:-------------------:|-------------------:|\ncell | center-align        | right-align        |</p></li><li><p>footnotes <a href=\"I\">^foot</a></p><pre><code>* footnotes [^foot]\n\n[^foot]: I really was missing those.</code></pre><p>{:markdown}</p></li></ul>\n\n<p> really was missing those.</p>\n\n<ul><li><p>Markdown inside HTML elements</p><pre><code>&lt;div markdown=&quot;1&quot; style=&quot;border: solid 1px black&quot;&gt;\n   This is a div with Markdown **strong text**\n&lt;/div&gt;</code></pre><p>{:html}</p><p>&lt;div markdown=&quot;1&quot; style=&quot;border: solid 1px black&quot;&gt;\n   This is a div with Markdown <strong>strong text</strong>\n&lt;/div&gt;</p></li><li><p>header ids</p><pre><code>## Download ##     {#download}</code></pre><p>{:markdown}</p><p>For example, <a href=\"#download\">a link to the download</a> header.</p></li><li><p>definition lists</p><pre><code>Definition list\n: something very hard to parse</code></pre><p>{:markdown}</p><p>Definition list\n: something very hard to parse</p></li><li><p>abbreviations or ABB for short.</p></li></ul>\n\n<p>*[ABB]: Simply an abbreviation</p>\n\n<p>&lt;script src=&quot;http://www.google-analytics.com/urchin.js&quot; type=&quot;text/javascript&quot;&gt;\n&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n_uacct = &quot;UA-155626-2&quot;;\nurchinTracker();\n&lt;/script&gt;</p>\n\n<p>&lt;!--\nFuture developments                              {#future}</p>\n\n<p>I think that <a href=\"http://sophos.berkeley.edu/macfarlane/pandoc/\">Pandoc</a> and <a href=\"http://fletcher.freeshell.org/wiki/MultiMarkdown\">MultiMarkdown</a> are very cool projects.\nHowever, they are written in Haskell and Perl, respectively.\nI would love to have an equivalent in Ruby.</p>\n\n<p>--&gt;</p>";
},"useData":true});
})();
